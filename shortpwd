#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Print the path of the working directory with long dirnames shortened.

If the whole path exceeds a certain length, it will be shortened by trimming
the individual directory names that form its path, by reducing them to a unique
prefix within their parent directory, or, failing that, by just cutting out
their middle part.
"""

from __future__ import division

import logging
import os
import pathlib
import sys

log = logging.getLogger(__name__)

DEBUG = False
"""Print debugging information to stderr."""

ABBREV = 'â€¦'
"""Replacement to use when shortening names"""

SHRINK_PATHS_BEYOND_LENGTH = 20
"""Paths shorter than this will not be shortened."""

MIN_NAME_LENGTH = 3
"""When shortening a path, don't shrink individual names to less than this."""

MIN_NAME_ABBREV_LENGTH = MIN_NAME_LENGTH + len(ABBREV)
"""The minimum length of a name including abbreviation marks."""

MAX_NAME_LENGTH = MIN_NAME_ABBREV_LENGTH
"""When shortening a path, only shrink names which are longer than this."""


def shorten(path):
    """Shorten a path by trimming the directory names it's made of."""
    path = pathlib.Path(path)
    return os.path.join(*_shorten_parts(path))


def _shorten_parts(target_path):
    dot = pathlib.Path('.')  # can be in Path.parents, e.g. for '..'
    paths = [p for p in reversed(target_path.parents) if p != dot] + [target_path]
    last_index = len(paths) - 1
    for i, path in enumerate(paths):
        distance_from_end = min(i, last_index - i)
        if distance_from_end == 0:
            # don't shorten; '/' has no name, '.' also has no anchor
            yield path.name or path.anchor or str(path)
        else:
            yield _shorten_name(path)


def _shorten_name(path):
    maxlen = MAX_NAME_LENGTH
    name = path.name
    is_root_or_dot_path = not name and path.parent == path
    if is_root_or_dot_path:
        return path.anchor or str(path)  # '.' has no name or anchor
    if maxlen is None or len(name) <= maxlen or name == '~':
        return name
    return _find_unique_prefix(path, maxlen) or _abbrev(name, maxlen)


def _abbrev(name, maxlen):
    """Trim name by replacing its middle by an abbreviation string."""
    maxlen = maxlen or len(name)
    available = max(1, MIN_NAME_LENGTH, maxlen - len(ABBREV))
    _debug('abbrev', name=name, maxlen=maxlen)
    right_count = int(available / 2)
    left_count = available - right_count
    return name[:left_count] + ABBREV + name[-right_count:]


def _find_unique_prefix(path, maxlen):
    """Get shortest unique prefix of the pathname in its parent directory.

    For example, for `/path/to/some_name`, it will return the shortest prefix
    if `some_name` that is not shared by any other entry in the `/path/to`
    directory.

    Returns:
        The shortest prefix + the abbreviation string, or `None`.
    """
    name = path.name
    minlen = max(1, MIN_NAME_LENGTH)
    maxlen = min(maxlen, len(name)) if maxlen else len(name)
    available = max(minlen, maxlen - len(ABBREV))
    _debug('unique', name=name, maxlen=maxlen)
    if not path.parent or path.parent == path:
        return
    try:
        siblings = {
            entry.name
            for entry in os.scandir(os.path.expanduser(path.parent))
            if entry.name != name
        }
    except OSError as error:
        _debug(error)
        return
    prefixes = (name[:n] for n in range(minlen, available + 1))
    for prefix in prefixes:
        if not any(sibling.startswith(prefix) for sibling in siblings):
            abbrev = prefix + ABBREV
            return name if (len(abbrev) >= len(name)) else abbrev


def _debug(*a, **kw):
    if DEBUG:
        things = a
        things += tuple(f'{k}={v!r}' for k, v in kw.items())
        print(*things, file=sys.stderr)


if __name__ == '__main__':
    cwd = os.getcwd()
    home = os.path.expanduser('~')
    if cwd.startswith(home):
        cwd = '~' + cwd[len(home) :]
    if len(cwd) > SHRINK_PATHS_BEYOND_LENGTH:
        orig = cwd
        try:
            cwd = shorten(cwd)
        except Exception:
            log.exception('Error shrinking path %r', cwd)
        if DEBUG:
            cwdlen, origlen = len(cwd), len(orig)
            cwd = f'{cwd}|{cwdlen}|{cwdlen/origlen:.2}'
    print(cwd)
