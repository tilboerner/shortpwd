#!/usr/bin/env python
from __future__ import division

"""Print the name of the working directory with long dirnames shortened."""

import logging
import os
import pathlib
import sys
from itertools import chain, zip_longest

log = logging.getLogger(__name__)

DEBUG = False
ABBREV = 'â€¦'
SHRINK_AT_TOTAL_LENGTH = 20
SHRINK_AT_PART_LENGTH = 4
PART_MIN_LENGTH = 2


def shorten(path):
    path = pathlib.Path(path)
    return os.path.join(*(_shorten_parts(path)))


def _shorten_parts(path):
    samepath = pathlib.Path('.')
    paths = list(p for p in reversed(path.parents) if p != samepath) + [path]
    split = round(len(paths) / 2 + 0.25)  # index after middle
    assert split > 0
    from_left = paths[:split]
    from_right = list(reversed(paths[split:]))
    assert len(from_left) - len(from_right) in (0, 1)
    iter_inwards = chain.from_iterable(zip_longest(from_left, from_right))
    right = []
    for i, p in enumerate(iter_inwards):
        if p is None:
            break  # from_left was longer
        if i < 2:
            short = p.name or p.anchor  # don't shorten first and last part
        else:
            short = _shorten_name(p)
        # _debug(f'{maxlen:02}', repr(str(p)), repr(short))
        if i % 2 == 0:
            yield short
        else:
            right.append(short)
    yield from reversed(right)


def _shorten_name(path):
    maxlen = SHRINK_AT_PART_LENGTH
    anchor, name = path.anchor, path.name
    namelen = len(name)
    if anchor and not name and path.parent == path:  # root path
        return anchor
    if maxlen is None or namelen <= maxlen or name == '~':
        return name
    assert namelen > maxlen
    return _find_unique_prefix(path, maxlen) or _abbrev(name, maxlen)


def _abbrev(name, maxlen):
    available = max(PART_MIN_LENGTH, maxlen - len(ABBREV))
    _debug('abbrev', name=name, maxlen=maxlen)
    right_count = int(available / 2)
    left_count = available - right_count
    return name[:left_count] + ABBREV + name[len(name) - right_count:]


def _find_unique_prefix(path, maxlen):
    name = path.name
    namelen = len(name)
    _debug('unique', name=name, maxlen=maxlen)
    siblings = list(_yield_sibling_names(path))
    assert name not in siblings
    sibling_prefixes = set(chain.from_iterable(
        _prefixes(s, maxlen=namelen) for s in siblings
    ))
    for prefix in _prefixes(name):
        if len(prefix) + len(ABBREV) >= namelen:
            return name
        if prefix not in sibling_prefixes:
            return prefix + ABBREV


def _yield_sibling_names(path):
    path = path.expanduser()
    if path.parent.name == '.':
        return
    is_dir = None
    if path.exists():
        is_dir = path.is_dir()
        name = path.name
    for entry in os.scandir(path.parent):
        if (is_dir is None or entry.is_dir() == is_dir) and entry.name != name:
            yield entry.name


def _prefixes(string, minlen=None, maxlen=None):
    assert minlen is None or minlen >= 0
    strlen = len(string)
    maxlen = maxlen or strlen
    minlen = minlen or max(1, SHRINK_AT_PART_LENGTH - len(ABBREV))
    minlen = min(minlen, maxlen)
    return (string[:n] for n in range(minlen, maxlen))


def _debug(*a, **kw):
    if DEBUG:
        things = a
        things += tuple(f'{k}={v!r}' for k, v in kw.items())
        print(*things, file=sys.stderr)


if __name__ == '__main__':
    cwd = os.getcwd()
    home = os.path.expanduser('~')
    if cwd.startswith(home):
        cwd = '~' + cwd[len(home):]
    if len(cwd) > SHRINK_AT_TOTAL_LENGTH:
        orig = cwd
        try:
            cwd = shorten(cwd)
        except Exception:
            log.exception('')
        if DEBUG:
            cwdlen, origlen = len(cwd), len(orig)
            cwd = f'{cwd}|{cwdlen}|{cwdlen/origlen:.2}'
    print(cwd)
